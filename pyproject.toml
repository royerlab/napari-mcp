[project]
name = "napari-mcp"
version = "0.1.0"
description = "MCP server for remote control of napari viewers via Model Context Protocol"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Ilan Theodoro", email = "ilan.silva@czbiohub.org"},
]
maintainers = [
    {name = "Ilan Theodoro", email = "ilan.silva@czbiohub.org"},
]
keywords = ["napari", "mcp", "microscopy", "image-analysis", "ai", "claude"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastmcp>=2.7.0",
    "napari>=0.5.5",
    "pyqt6>=6.5.0",
    "qtpy>=2.4.1",
    "Pillow>=10.3.0",
    "imageio>=2.34.0",
    "numpy>=1.26.0",
]

[project.urls]
Homepage = "https://github.com/royerlab/napari-mcp"
Repository = "https://github.com/royerlab/napari-mcp"
Documentation = "https://github.com/royerlab/napari-mcp#readme"
"Bug Tracker" = "https://github.com/royerlab/napari-mcp/issues"
Changelog = "https://github.com/royerlab/napari-mcp/blob/main/CHANGELOG.md"

[project.optional-dependencies]
test = [
    "pytest>=8.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.0.0",
]
dev = [
    "ruff>=0.12.10",
    "mypy>=1.17.0",
    "types-Pillow>=10.0.0",
    "pre-commit>=4.3.0",
    "bandit>=1.8.6",
    "safety>=3.6.0",
]
all = [
    "napari-mcp[test,dev]",
]

[project.scripts]
napari-mcp = "napari_mcp_server:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["napari_mcp_server"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
addopts = "-q -p no:napari"
asyncio_mode = "auto"
markers = [
    "realgui: marks tests that require a real napari GUI session (deselect with -m 'not realgui')",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "S",   # bandit
    "D",   # pydocstyle
]
ignore = [
    "S101", # assert detected - allow in tests
    "S102", # exec detected - needed for MCP server functionality
    "S110", # try-except-pass - acceptable for best-effort operations
    "S307", # eval detected - needed for MCP server functionality
    "S603", # subprocess call - allow for tools
    "S607", # subprocess with shell - allow for tools
    "SIM105", # contextlib.suppress - prefer explicit try/except for clarity
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101", "S106", "S311", "D"]  # Allow asserts, hardcoded passwords, random, and skip docstrings in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[dependency-groups]
dev = [
    "ruff>=0.12.10",
]
