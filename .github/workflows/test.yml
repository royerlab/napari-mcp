name: Tests

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  workflow_call:
    inputs:
      python-versions:
        description: 'JSON array of Python versions for the matrix'
        required: false
        type: string
        default: '["3.10","3.11","3.12","3.13"]'
    secrets:
      CODECOV_TOKEN:
        required: false


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UV_CACHE_DIR: ~/.cache/uv
  PYTEST_CACHE_DIR: .pytest_cache
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  # Quick smoke tests for fast feedback
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-suffix: "smoke"

    - name: Setup Qt libraries
      uses: tlambert03/setup-qt-libs@v1

    - name: Install dependencies
      run: |
        uv sync --extra test

    - name: Test with tox
      uses: aganders3/headless-gui@v1
      with:
        run: uv run pytest tests/test_tools.py::test_all_tools_end_to_end -v -x

  # Main test suite - runs ALL tests including GUI on ALL platforms
  test-all-platforms:
    needs: smoke-tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          # Test macOS and Windows on Python 3.13
          - os: macos-latest
            python-version: "3.13"
          - os: windows-latest
            python-version: "3.13"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache test results
      uses: actions/cache@v4
      with:
        path: |
          .pytest_cache
          .coverage.*
        key: test-cache-${{ matrix.os }}-py${{ matrix.python-version }}-${{ hashFiles('tests/**/*.py') }}
        restore-keys: |
          test-cache-${{ matrix.os }}-py${{ matrix.python-version }}-

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ matrix.python-version }}
        enable-cache: true
        cache-suffix: "${{ matrix.os }}-py${{ matrix.python-version }}"

    # Platform-specific Qt/display setup (following napari's approach)
    - name: Setup Qt libraries (Linux only)
      if: matrix.os == 'ubuntu-latest'
      uses: tlambert03/setup-qt-libs@v1

    - name: Setup headless display (All platforms)
      uses: pyvista/setup-headless-display-action@v4.2
      with:
        qt: true
        wm: herbstluftwm

    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-qt pytest-asyncio pytest-xdist pytest-timeout

    - name: Test with tox
      uses: aganders3/headless-gui@v1
      with:
        run: |
          uv run pytest tests/ --verbose --dist loadscope --cov=napari_mcp --cov-report=xml --cov-report=term-missing --cov-fail-under=65 --durations=20 --timeout=60

    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml
          pytest-report.html
        retention-days: 7

  # Code quality checks
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: "3.11"
        enable-cache: true

    - name: Install dependencies
      run: |
        uv pip install --system ruff mypy types-Pillow bandit "safety<4.0"

    - name: Run quality checks
      run: |
        echo "::group::Ruff Linting"
        ruff check src/ tests/ --output-format=github
        echo "::endgroup::"

        echo "::group::Ruff Formatting"
        ruff format --check src/ tests/
        echo "::endgroup::"

        echo "::group::Type Checking"
        mypy src/napari_mcp/ --ignore-missing-imports || true
        echo "::endgroup::"

        echo "::group::Security Scan"
        bandit -r src/ --skip B110,B101,B102,B307 -f json || true
        safety check || true
        echo "::endgroup::"

  # Final status check
  test-status:
    if: always()
    needs: [smoke-tests, test-all-platforms, quality]
    runs-on: ubuntu-latest
    steps:
    - name: Check test status
      run: |
        if [[ "${{ needs.smoke-tests.result }}" == "failure" || \
              "${{ needs.test-all-platforms.result }}" == "failure" || \
              "${{ needs.quality.result }}" == "failure" ]]; then
          echo "Tests failed!"
          exit 1
        fi
        echo "All tests passed!"
