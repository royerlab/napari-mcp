name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Reduce test matrix size for faster CI
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "0.5.13"
        enable-cache: true

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libgl1-mesa-dev libglib2.0-0 libxrender1 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2t64 libxi6 libxtst6

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # No additional dependencies needed for macOS

    - name: Install dependencies
      run: |
        uv lock --upgrade
        uv sync --extra test

    - name: Run tests (headless) - Group 1 (Core tests)
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        uv run pytest tests/test_coverage.py tests/test_external_viewer.py tests/test_integration.py -v -m "not realgui" --cov=napari_mcp_server --cov-report=xml --cov-report=term-missing --cov-append
    
    - name: Run tests (headless) - Group 2 (Bridge tests)
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        uv run pytest tests/test_bridge_server.py tests/test_bridge_simplified.py tests/test_edge_cases.py -v -m "not realgui" --cov=napari_mcp_server --cov-report=xml --cov-report=term-missing --cov-append
    
    - name: Run tests (headless) - Group 3 (Tools tests)
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        uv run pytest tests/test_tools.py -v -m "not realgui" --cov=napari_mcp_server --cov-report=xml --cov-report=term-missing --cov-append

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "0.5.13"
        enable-cache: true

    - name: Install dependencies
      run: |
        uv pip install --system ruff mypy types-Pillow

    - name: Run ruff (linter)
      run: |
        ruff check src/ tests/

    - name: Run ruff (formatter)
      run: |
        ruff format --check src/ tests/

    - name: Run mypy (type checker)
      run: |
        mypy src/napari_mcp_server.py --ignore-missing-imports || echo "Type checking has warnings but tests pass"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run bandit (security linter)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --skip B110,B101,B102,B307

    - name: Run safety (dependency vulnerability scanner)
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
